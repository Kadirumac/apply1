{"version":3,"sources":["resources/images/svg/night.svg","resources/images/svg/city.svg","resources/images/svg/morning.svg","resources/images/svg/tubes.svg","resources/images/svg/woods.svg","resources/images/svg/beach.svg","demos/SVGLoader.js"],"names":["module","exports","colors","Scene","React","memo","urls","svgs","useThree","viewport","useLoader","SVGLoader","shapes","useMemo","map","paths","flatMap","path","index","toShapes","shape","color","fillOpacity","userData","style","useState","page","setPage","useEffect","setInterval","i","length","useSpring","from","delay","config","mass","tension","friction","transitions","useTransition","item","uuid","rotation","position","opacity","enter","leave","order","trail","lazy","unique","reset","intensity","scale","attach","args","meshPhongMaterial","depthTest","group","Math","PI","key","props","mesh","interpolate","x","y","z","o","depthWrite","transparent","App","invalidateFrameloop","camera","fov","near","far","onCreated","lookAt","fallback","night","city","morning","tubes","woods","beach"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,+OCYrCC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAEjEC,EAAQC,IAAMC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KAGpBC,GAFeC,cAAbC,SAEKC,YAAUC,IAAWL,IAC5BM,EAASC,mBACb,kBACEN,EAAKO,KAAI,qBAAGC,MACJC,SAAQ,SAACC,EAAMC,GAAP,OACZD,EACGE,UAAS,GACTL,KAAI,SAAAM,GAAK,MAAK,CAAEA,QAAOC,MAAOJ,EAAKI,MAAOC,YAAaL,EAAKM,SAASC,MAAMF,YAAaJ,oBAGjG,CAACX,IAbkC,EAgBbkB,mBAAS,GAhBI,mBAgB9BC,EAhB8B,KAgBxBC,EAhBwB,KAiBrCC,qBAAU,WAAWC,aAAY,kBAAMF,GAAQ,SAAAG,GAAC,OAAKA,EAAI,GAAKxB,EAAKyB,YAAS,OAAO,IAjB9C,IAmB7BV,EAAUW,YAAU,CAC1BC,KAAM,CAAEZ,MAAOnB,EAAO,IACtBmB,MAAOnB,EAAOwB,GACdQ,MAAO,IACPC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,OAJrCjB,MAOFkB,EAAcC,YAAc5B,EAAOc,IAAO,SAAAe,GAAI,OAAIA,EAAKrB,MAAMsB,OAAM,CACvET,KAAM,CAAEU,SAAU,CAAC,EAAG,GAAK,GAAIC,SAAU,EAAE,IAAK,EAAG,GAAIC,QAAS,GAChEC,MAAO,CAAEH,SAAU,CAAC,EAAG,EAAG,GAAIC,SAAU,CAAC,EAAG,EAAG,GAAIC,QAAS,GAC5DE,MAAO,CAAEJ,SAAU,CAAC,GAAI,GAAK,GAAIC,SAAU,CAAC,IAAK,EAAG,GAAIC,QAAS,GACjEG,MAAO,CAAC,QAAS,QAAS,UAC1Bb,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,KAC3CW,MAAO,EACPC,MAAM,EACNC,QAAQ,EACRC,OAAO,IAET,OACE,oCACE,kCAAcC,UAAW,KACzB,+BAAWA,UAAW,GAAKT,SAAU,CAAC,IAAK,IAAK,OAChD,0BAAMU,MAAO,CAAC,IAAO,IAAO,GAAIX,SAAU,CAAC,GAAI,GAAK,IAClD,yCAAqBY,OAAO,WAAWC,KAAM,CAAC,EAAG,KACjD,kBAAC,IAAEC,kBAAH,CAAqBF,OAAO,WAAWlC,MAAOA,EAAOqC,WAAW,KAElE,kBAAC,IAAEC,MAAH,CAASf,SAAU,CAAC,KAAM,IAAKlB,GAAOiB,SAAU,CAAC,EAAG,EAAGiB,KAAKC,KACzDtB,EAAYzB,KACX,oBAAG2B,KAAQrB,EAAX,EAAWA,MAAOC,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,YAAaJ,EAAtC,EAAsCA,MAAS4C,EAA/C,EAA+CA,IAA/C,IAAoDC,MAASlB,EAA7D,EAA6DA,QAASD,EAAtE,EAAsEA,SAAUD,EAAhF,EAAgFA,SAAhF,OACE,kBAAC,IAAEqB,KAAH,CAAQF,IAAKA,EAAKnB,SAAUA,EAAUC,SAAUA,EAASqB,aAAY,SAACC,EAAGC,EAAGC,GAAP,MAAa,CAACF,EAAGC,EAAGC,EAAIlD,OAC3F,kBAAC,IAAEuC,kBAAH,CACEF,OAAO,WACPlC,MAAOA,EACPwB,QAASA,EAAQoB,aAAY,SAAAI,GAAC,OAAIA,EAAI/C,KACtCgD,YAAY,EACZC,aAAW,IAEb,yCAAqBhB,OAAO,WAAWC,KAAM,CAACpC,cAS7C,SAASoD,IACtB,OACE,kBAAC,IAAD,CACEC,qBAAmB,EACnBC,OAAQ,CAAEC,IAAK,GAAI/B,SAAU,CAAC,EAAG,EAAG,KAAMgC,KAAM,GAAKC,IAAK,KAC1DC,UAAW,qBAAGJ,OAAoBK,OAAO,EAAG,EAAG,KAC/C,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC7E,EAAD,CAAOG,KAAM,CAAC2E,IAAOC,IAAMC,IAASC,IAAOC,IAAOC","file":"static/js/3.dc3b75dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/night.1e237a38.svg\";","module.exports = __webpack_public_path__ + \"static/media/city.dcc0c622.svg\";","module.exports = __webpack_public_path__ + \"static/media/morning.aead2a52.svg\";","module.exports = __webpack_public_path__ + \"static/media/tubes.3cd0c63a.svg\";","module.exports = __webpack_public_path__ + \"static/media/woods.c8a54d9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/beach.77a20a9c.svg\";","import * as THREE from 'three'\nimport React, { Suspense, useState, useRef, useContext, useEffect, useCallback, useMemo } from 'react'\nimport { Canvas, useThree, useLoader } from 'react-three-fiber'\nimport { update, useTransition, useSpring, a } from 'react-spring/three'\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader'\nimport night from '../resources/images/svg/night.svg'\nimport city from '../resources/images/svg/city.svg'\nimport morning from '../resources/images/svg/morning.svg'\nimport tubes from '../resources/images/svg/tubes.svg'\nimport woods from '../resources/images/svg/woods.svg'\nimport beach from '../resources/images/svg/beach.svg'\n\nconst colors = ['#21242d', '#ea5158', '#0d4663', '#ffbcb7', '#2d4a3e', '#8bd8d2']\n\nconst Scene = React.memo(({ urls }) => {\n  const { viewport } = useThree()\n\n  const svgs = useLoader(SVGLoader, urls)\n  const shapes = useMemo(\n    () =>\n      svgs.map(({ paths }) =>\n        paths.flatMap((path, index) =>\n          path\n            .toShapes(true)\n            .map(shape => ({ shape, color: path.color, fillOpacity: path.userData.style.fillOpacity, index }))\n        )\n      ),\n    [svgs]\n  )\n\n  const [page, setPage] = useState(0)\n  useEffect(() => void setInterval(() => setPage(i => (i + 1) % urls.length), 3000), [])\n\n  const { color } = useSpring({\n    from: { color: colors[0] },\n    color: colors[page],\n    delay: 500,\n    config: { mass: 5, tension: 800, friction: 400 },\n  })\n\n  const transitions = useTransition(shapes[page], item => item.shape.uuid, {\n    from: { rotation: [0, 0.4, 0], position: [-500, 0, 0], opacity: 0 },\n    enter: { rotation: [0, 0, 0], position: [0, 0, 0], opacity: 1 },\n    leave: { rotation: [0, -0.4, 0], position: [500, 0, 0], opacity: 0 },\n    order: ['leave', 'enter', 'update'],\n    config: { mass: 4, tension: 500, friction: 100 },\n    trail: 5,\n    lazy: true,\n    unique: true,\n    reset: true,\n  })\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <spotLight intensity={0.5} position={[300, 300, 4000]} />\n      <mesh scale={[10000, 10000, 1]} rotation={[0, -0.2, 0]}>\n        <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n        <a.meshPhongMaterial attach=\"material\" color={color} depthTest={false} />\n      </mesh>\n      <a.group position={[1220, 700, page]} rotation={[0, 0, Math.PI]}>\n        {transitions.map(\n          ({ item: { shape, color, fillOpacity, index }, key, props: { opacity, position, rotation } }) => (\n            <a.mesh key={key} rotation={rotation} position={position.interpolate((x, y, z) => [x, y, z + index])}>\n              <a.meshPhongMaterial\n                attach=\"material\"\n                color={color}\n                opacity={opacity.interpolate(o => o * fillOpacity)}\n                depthWrite={false}\n                transparent\n              />\n              <shapeBufferGeometry attach=\"geometry\" args={[shape]} />\n            </a.mesh>\n          )\n        )}\n      </a.group>\n    </>\n  )\n})\n\nexport default function App() {\n  return (\n    <Canvas\n      invalidateFrameloop\n      camera={{ fov: 90, position: [0, 0, 550], near: 0.1, far: 20000 }}\n      onCreated={({ camera }) => camera.lookAt(0, 0, 0)}>\n      <Suspense fallback={null}>\n        <Scene urls={[night, city, morning, tubes, woods, beach]} />\n      </Suspense>\n    </Canvas>\n  )\n}\n"],"sourceRoot":""}